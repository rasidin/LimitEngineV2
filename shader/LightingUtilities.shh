/*********************************************************************
Copyright (c) 2020 LIMITGAME

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
----------------------------------------------------------------------
 @file  LightingUtilities.shh
 @brief Utilities for lighting
 @author minseob (https://github.com/rasidin)
 *********************************************************************/

Texture2D IBLReflectionTexture;
SamplerState IBLReflectionSampler;
Texture2D IBLIrradianceTexture;
SamplerState IBLIrradianceSampler;

// x : miplevel
float4 IBLReflectionInfo;

float2 CalcLongLatUV(float3 Direction)
{
    float2 longlat = float2(atan2(Direction.x, Direction.z) + PI, acos(Direction.y));
    return longlat / float2(2.0 * PI, PI);
}

float3 SampleIBLReflection(float2 uv, float roughness)
{
	float miplevel = max(0, IBLReflectionInfo.x - 6 + log2(roughness));
	return IBLReflectionTexture.SampleLevel(IBLReflectionSampler, uv, miplevel).rgb;
}

float3 SampleIBLReflection(float3 dir, float roughness)
{
	float2 uv = CalcLongLatUV(dir);
	return SampleIBLReflection(uv, roughness);
}

float3 SampleIBLIrradiance(float2 uv)
{
	return IBLIrradianceTexture.Sample(IBLIrradianceSampler, uv).rgb;
}

float3 SampleIBLIrradiance(float3 dir)
{
	float2 uv = CalcLongLatUV(dir);
	return SampleIBLIrradiance(uv);
}

float4 ReflectionSpherePositionAndRadius = float4(0.0, 0.0, 0.0, 1000.0);
float3 WorldDirectionToSphereCaptureDirection(float3 R, float3 WorldPosition)
{
	float3 LocalInSphere = WorldPosition - ReflectionSpherePositionAndRadius.xyz;

	float2 QuadraticCoef = float2(dot(R, LocalInSphere), dot(LocalInSphere, LocalInSphere) - ReflectionSpherePositionAndRadius.w * ReflectionSpherePositionAndRadius.w);
	float Determinant = QuadraticCoef.x * QuadraticCoef.x - QuadraticCoef.y;
	float Intersection = sqrt(Determinant) - QuadraticCoef.x;
	float3 IntersectionPosition = LocalInSphere + Intersection * R;
	return normalize(IntersectionPosition);
}

Texture2D AmbientOcclusionTexture;
SamplerState AmbientOcclusionSampler;
float GetAmbientOcclusionValue(float2 uv)
{
	return AmbientOcclusionTexture.Sample(AmbientOcclusionSampler, uv).x;
}