/***********************************************************
 LIMITEngine Shader File
 Copyright (C), LIMITGAME, 2020
 -----------------------------------------------------------
 @file  CommonDefinitions.shh
 @brief Definitions for shading
 @author minseob (https://github.com/rasidin)
***********************************************************/

#define PI 3.14159265359

// (Mod8, Mod16, Mod32, Mod64)
uint4 FrameIndexContext;

float4x4 WorldMatrix;
float4x4 ViewMatrix;
float4x4 WorldViewProjMatrix;
float4x4 ProjectionMatrix;
float4x4 ViewProjectionMatrix;

float FastSqrt(float x)
{
	return asfloat(0x1fbd1df5 + (asint(x) >> 1));
}

float FastAcos(float x)
{
	float res = -0.156583 * abs(x) + PI / 2;
	res *= FastSqrt(1.0 - abs(x));
	return x >= 0 ? res : PI - res;
}

float GetTangent(float3 v)
{
    return -v.z * rsqrt(max(1.0e-4, dot(v.xy, v.xy)));
}

float SinToCos(float t)
{
	return sqrt(1.0 - t * t);
}

float TanToSin(float t)
{
	return t * rsqrt(t*t + 1.0);
}

// Hammersley on hemisphere
// http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
float radicalInverse_VdC(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

float2 Hammersley(uint i, uint num)
{
	return float2(float(i) / float(num), radicalInverse_VdC(i));
}

float3 MakeDirectionFromLongLat(float2 longlat)
{
  float SineTheta = sin(longlat.x);

  float x = cos(longlat.y) * SineTheta;
  float y = sin(longlat.y) * SineTheta;
  float z = cos(longlat.x);

  return float3(x, y, z);
}

float3 RGBToYCoCg(float3 RGB)
{
	return float3(dot(RGB, float3( 1, 2, 1)), dot(RGB, float3( 2, 0,-2)), dot(RGB, float3(-1, 2,-1)));
}

float3 YCoCgToRGB(float3 YCoCg)
{
	float Y  = YCoCg.x * 0.25;
	float Co = YCoCg.y * 0.25;
	float Cg = YCoCg.z * 0.25;

	return float3(Y + Co - Cg, Y + Cg, Y - Co - Cg);
}

Texture3D BlueNoiseTexture;
SamplerState BlueNoiseSampler;

// (InvWidth, InvHeight, InvDepth)
float4 BlueNoiseContext;

float GetBlueNoiseValue1(float3 pos)
{
	return BlueNoiseTexture.Sample(BlueNoiseSampler, pos * BlueNoiseContext.xyz).x;
}

float3 GetBlueNoiseValue3(float3 pos)
{
	return BlueNoiseTexture.Sample(BlueNoiseSampler, pos * BlueNoiseContext.xyz).xyz;
}

float4 GetBlueNoiseValue4(float3 pos)
{
	return BlueNoiseTexture.Sample(BlueNoiseSampler, pos * BlueNoiseContext.xyz).xyzw;
}

// (-2 / focal1, -2 / focal2, focal1, focal2 ) focal1 = Height / (F * Width), focal2 = 1 / F
float4 UVtoViewParameter;

float3 UVtoViewPosition(float2 uv, float z)
{
	return float3((UVtoViewParameter.xy * uv + UVtoViewParameter.zw) * z, z);
}

SamplerState SceneDepthSampler;
Texture2D SceneDepthTexture;

// (near, far, far - near, reserved)
float4 PerspectiveProjectionParameters;

float GetViewZ(float z)
{
	return PerspectiveProjectionParameters.x * PerspectiveProjectionParameters.y / (PerspectiveProjectionParameters.y - PerspectiveProjectionParameters.z * z);
}

float3 GetViewPosition(float2 uv)
{
	float sceneDepthZ = SceneDepthTexture.Sample(SceneDepthSampler, uv).x;
	return UVtoViewPosition(uv, GetViewZ(sceneDepthZ));
}

SamplerState SceneNormalSampler;
Texture2D SceneNormalTexture;

float3 GetWorldNormal(float2 uv)
{
	return SceneNormalTexture.Sample(SceneNormalSampler, uv).xyz;
}

float3 GetViewNormal(float2 uv)
{
	return mul(GetWorldNormal(uv), (float3x3)ViewMatrix);
}

float3 GetViewProjectionNormal(float2 uv)
{
	return mul(GetWorldNormal(uv), (float3x3)ViewProjectionMatrix);
}
