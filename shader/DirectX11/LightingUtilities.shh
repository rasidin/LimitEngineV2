/***********************************************************
 LIMITEngine Shader File
 Copyright (C), LIMITGAME, 2020
 -----------------------------------------------------------
 @file  LightingUtilities.shh
 @brief Utilities for lighting
 @author minseob (leeminseob@outlook.com)
***********************************************************/

Texture3D IBLReflectionTexture;
SamplerState IBLReflectionSampler;
Texture2D IBLIrradianceTexture;
SamplerState IBLIrradianceSampler;

float2 CalcLongLatUV(float3 Direction)
{
    float2 longlat = float2(atan2(Direction.x, Direction.z) + PI, acos(Direction.y));
    return longlat / float2(2.0 * PI, PI);
}

float3 SampleIBLReflection(float2 uv, float roughness)
{
	return IBLReflectionTexture.Sample(IBLReflectionSampler, float3(uv, roughness)).rgb;
}

float3 SampleIBLReflection(float3 dir, float roughness)
{
	float2 uv = CalcLongLatUV(dir);
	return SampleIBLReflection(uv, roughness);
}

float3 SampleIBLIrradiance(float2 uv)
{
	return IBLIrradianceTexture.Sample(IBLIrradianceSampler, uv).rgb;
}

float3 SampleIBLIrradiance(float3 dir)
{
	float2 uv = CalcLongLatUV(dir);
	return SampleIBLIrradiance(uv);
}

float4 ReflectionSpherePositionAndRadius = float4(0.0, 0.0, 0.0, 1000.0);
float3 WorldDirectionToSphereCaptureDirection(float3 R, float3 WorldPosition)
{
	float3 LocalInSphere = WorldPosition - ReflectionSpherePositionAndRadius.xyz;

	float2 QuadraticCoef = float2(dot(R, LocalInSphere), dot(LocalInSphere, LocalInSphere) - ReflectionSpherePositionAndRadius.w * ReflectionSpherePositionAndRadius.w);
	float Determinant = QuadraticCoef.x * QuadraticCoef.x - QuadraticCoef.y;
	float Intersection = sqrt(Determinant) - QuadraticCoef.x;
	float3 IntersectionPosition = LocalInSphere + Intersection * R;
	return normalize(IntersectionPosition);
}

Texture2D AmbientOcclusionTexture;
SamplerState AmbientOcclusionSampler;
float GetAmbientOcclusionValue(float2 uv)
{
	return AmbientOcclusionTexture.Sample(AmbientOcclusionSampler, uv).x;
}